"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Upload, MapPin, DollarSign, Users } from "lucide-react";
import { Editor } from "@/components/blocks/editor-00/editor";
import { SerializedEditorState } from "lexical";

interface TourData {
  // Th√¥ng tin c∆° b·∫£n
  name: string;
  shortDescription: string;
  location: string;

  // H√¨nh ·∫£nh
  images: string[];

  // Chi ti·∫øt tour
  duration: string;
  maxGuests: number;
  difficulty: string;
  category: string;

  // Gi√° c·∫£
  price: number;
  currency: string;
  availability: string;

  // M√¥ t·∫£ chi ti·∫øt
  detailedDescription: string;
  detailedDescriptionEditor: SerializedEditorState;
  included: string[];
  excluded: string[];
  requirements: string[];
}

const initialEditorState = {
  root: {
    children: [
      {
        children: [
          {
            detail: 0,
            format: 0,
            mode: "normal",
            style: "",
            text: "M√¥ t·∫£ chi ti·∫øt v·ªÅ tour c·ªßa b·∫°n...",
            type: "text",
            version: 1,
          },
        ],
        direction: "ltr",
        format: "",
        indent: 0,
        type: "paragraph",
        version: 1,
      },
    ],
    direction: "ltr",
    format: "",
    indent: 0,
    type: "root",
    version: 1,
  },
} as unknown as SerializedEditorState;

const initialTourData: TourData = {
  name: "",
  shortDescription: "",
  location: "",
  images: [],
  duration: "",
  maxGuests: 1,
  difficulty: "",
  category: "",
  price: 0,
  currency: "USD",
  availability: "",
  detailedDescription: "",
  detailedDescriptionEditor: initialEditorState,
  included: [],
  excluded: [],
  requirements: [],
};

interface Section {
  id: string;
  title: string;
  description: string;
  isRequired: boolean;
}

export default function CreateTourWizard() {
  const [tourData, setTourData] = useState<TourData>(initialTourData);
  const sections: Section[] = [
    {
      id: "basic-info",
      title: "Th√¥ng tin c∆° b·∫£n v√† tags",
      description: "T√™n tour, m√¥ t·∫£ ng·∫Øn v√† ƒë·ªãa ƒëi·ªÉm. Th√¥ng tin n√†y s·∫Ω hi·ªÉn th·ªã tr√™n danh s√°ch tour.",
      isRequired: true,
    },
    {
      id: "images",
      title: "H√¨nh ·∫£nh tour",
      description: "T·∫£i l√™n h√¨nh ·∫£nh ch·∫•t l∆∞·ª£ng cao ƒë·ªÉ thu h√∫t kh√°ch h√†ng. C·∫ßn √≠t nh·∫•t 6 h√¨nh ·∫£nh.",
      isRequired: true,
    },
    {
      id: "details",
      title: "Chi ti·∫øt tour v√† c·∫•u h√¨nh",
      description: "Th·ªùi gian, s·ªë l∆∞·ª£ng kh√°ch, ƒë·ªô kh√≥ v√† ph√¢n lo·∫°i tour.",
      isRequired: true,
    },
    {
      id: "pricing",
      title: "Gi√° c·∫£ v√† t√≠nh kh·∫£ d·ª•ng",
      description: "Thi·∫øt l·∫≠p gi√° tour v√† l·ªãch tr√¨nh kh·∫£ d·ª•ng.",
      isRequired: true,
    },
    {
      id: "description",
      title: "M√¥ t·∫£ chi ti·∫øt",
      description: "Th√¥ng tin ƒë·∫ßy ƒë·ªß v·ªÅ tour, bao g·ªìm v√† kh√¥ng bao g·ªìm, y√™u c·∫ßu.",
      isRequired: true,
    },
  ];

  // Helper function to extract text from editor state
  const extractTextFromEditor = (editorState: SerializedEditorState): string => {
    try {
      if (!editorState?.root?.children) return "";
      
      let text = "";
      const traverse = (node: { type?: string; text?: string; children?: unknown[] }) => {
        if (node.type === "text" && node.text) {
          text += node.text + " ";
        } else if (node.children) {
          node.children.forEach((child) => traverse(child as { type?: string; text?: string; children?: unknown[] }));
        }
      };
      
      editorState.root.children.forEach((child) => traverse(child as { type?: string; text?: string; children?: unknown[] }));
      return text.trim();
    } catch {
      return "";
    }
  };

  const updateTourData = (field: keyof TourData, value: string | number | string[] | SerializedEditorState) => {
    setTourData((prev) => ({ ...prev, [field]: value }));
  };

  const isSectionValid = (sectionId: string) => {
    switch (sectionId) {
      case "basic-info":
        return tourData.name.length >= 6 && tourData.shortDescription.length >= 20 && tourData.location.length >= 3;
      case "images":
        return tourData.images.length >= 6;
      case "details":
        return tourData.duration && tourData.maxGuests > 0 && tourData.difficulty && tourData.category;
      case "pricing":
        return tourData.price > 0 && tourData.availability;
      case "description":
        // For now, just check if we have some editor content or fallback description
        return tourData.detailedDescription.length >= 50 || tourData.detailedDescriptionEditor !== initialEditorState;
      default:
        return false;
    }
  };

  const renderSectionTrigger = (section: Section) => {

    return (
      <div className="flex items-center space-x-3 flex-1">
        <div className="text-left flex-1">
          <h3 className="text-lg font-bold text-gray-900">{section.title}</h3>
          <p className="text-base text-gray-600">{section.description}</p>
        </div>
      </div>
    );
  };

  const renderBasicInfoSection = () => (
    <div className="p-4 space-y-6">
      <div>
        <Label htmlFor="tourName" className="text-base font-medium text-gray-900">
          T√™n <span className="text-red-500">*</span>
        </Label>
        <Input
          id="tourName"
          placeholder="V√≠ d·ª•: Kh√°m Ph√° Th√†nh Ph·ªë Tokyo - H√†nh Tr√¨nh Qua VƒÉn H√≥a Nh·∫≠t B·∫£n"
          value={tourData.name}
          onChange={(e) => updateTourData("name", e.target.value)}
          className="mt-2 text-base min-h-[48px]"
        />
        <p className="text-base text-gray-500 mt-1">T√™n tour ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª± ({tourData.name.length}/6)</p>
      </div>

      <div>
        <Label htmlFor="shortDesc" className="text-base font-medium text-gray-900">
          M√¥ t·∫£ ng·∫Øn <span className="text-red-500">*</span>
        </Label>
        <textarea
          id="shortDesc"
          placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ tour c·ªßa b·∫°n, n·ªïi b·∫≠t nh·ªØng ƒëi·ªÉm thu h√∫t ch√≠nh..."
          value={tourData.shortDescription}
          onChange={(e) => updateTourData("shortDescription", e.target.value)}
          className="mt-2 w-full p-3 border border-gray-300 rounded-md text-base min-h-[96px] resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          rows={4}
        />
        <p className="text-base text-gray-500 mt-1">
          M√¥ t·∫£ ng·∫Øn ph·∫£i c√≥ √≠t nh·∫•t 20 k√Ω t·ª± ({tourData.shortDescription.length}/20)
        </p>
      </div>

      <div>
        <Label htmlFor="location" className="text-base font-medium text-gray-900">
          ƒê·ªãa ƒëi·ªÉm <span className="text-red-500">*</span>
        </Label>
        <div className="relative mt-2">
          <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
          <Input
            id="location"
            placeholder="V√≠ d·ª•: Tokyo, Nh·∫≠t B·∫£n"
            value={tourData.location}
            onChange={(e) => updateTourData("location", e.target.value)}
            className="pl-10 text-base min-h-[48px]"
          />
        </div>
        <p className="text-base text-gray-500 mt-1">ƒê·ªãa ƒëi·ªÉm ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª± ({tourData.location.length}/3)</p>
      </div>

      <Button variant="outline" className="text-base">
        Th√™m tags b·ªï sung
      </Button>
    </div>
  );

  const renderImagesSection = () => (
    <div className="p-6 space-y-6">
      <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-gray-400 transition-colors">
        <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
        <h3 className="text-lg font-medium text-gray-900 mb-2">T·∫£i l√™n h√¨nh ·∫£nh</h3>
        <p className="text-gray-500 mb-4 text-base">Ch·ªçn ho·∫∑c k√©o th·∫£ t·ªáp h√¨nh ·∫£nh v√†o ƒë√¢y</p>
        <Button variant="outline" className="text-base min-h-[48px]">
          Duy·ªát t·ªáp
        </Button>
      </div>

      <div className="grid grid-cols-3 gap-4">
        {Array.from({ length: 6 }).map((_, index) => (
          <div
            key={index}
            className="aspect-square border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center hover:border-gray-400 transition-colors"
          >
            <div className="text-center text-gray-500">
              <Upload className="w-8 h-8 mx-auto mb-2" />
              <p className="text-base">H√¨nh {index + 1}</p>
            </div>
          </div>
        ))}
      </div>

      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h4 className="font-medium text-blue-900 mb-2 text-base">üí° L·ªùi khuy√™n cho h√¨nh ·∫£nh ch·∫•t l∆∞·ª£ng:</h4>
        <ul className="text-blue-800 text-base space-y-1">
          <li>‚Ä¢ S·ª≠ d·ª•ng ƒë·ªô ph√¢n gi·∫£i cao (√≠t nh·∫•t 1200x800 pixels)</li>
          <li>‚Ä¢ Bao g·ªìm c√°c g√≥c nh√¨n kh√°c nhau c·ªßa ƒë·ªãa ƒëi·ªÉm</li>
          <li>‚Ä¢ Hi·ªÉn th·ªã nh·ªØng ƒëi·ªÉm n·ªïi b·∫≠t c·ªßa tour</li>
          <li>‚Ä¢ ƒê·∫£m b·∫£o h√¨nh ·∫£nh s√°ng v√† r√µ n√©t</li>
        </ul>
      </div>

      <div className="text-base text-gray-600">
        <strong>Ti·∫øn ƒë·ªô:</strong> {tourData.images.length}/6 h√¨nh ·∫£nh ƒë√£ t·∫£i l√™n
      </div>
    </div>
  );

  const renderDetailsSection = () => (
    <div className="p-6 space-y-6">
      <div className="grid grid-cols-2 gap-6">
        <div>
          <Label htmlFor="duration" className="text-base font-medium text-gray-900">
            Th·ªùi gian tour <span className="text-red-500">*</span>
          </Label>
          <select
            id="duration"
            value={tourData.duration}
            onChange={(e) => updateTourData("duration", e.target.value)}
            className="mt-2 w-full p-3 border border-gray-300 rounded-md text-base min-h-[48px] focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">Ch·ªçn th·ªùi gian</option>
            <option value="2-3 gi·ªù">2-3 gi·ªù</option>
            <option value="4-5 gi·ªù">4-5 gi·ªù</option>
            <option value="6-7 gi·ªù">6-7 gi·ªù</option>
            <option value="8+ gi·ªù">8+ gi·ªù</option>
            <option value="C·∫£ ng√†y">C·∫£ ng√†y</option>
            <option value="2-3 ng√†y">2-3 ng√†y</option>
            <option value="1 tu·∫ßn">1 tu·∫ßn</option>
          </select>
        </div>

        <div>
          <Label htmlFor="maxGuests" className="text-base font-medium text-gray-900">
            S·ªë kh√°ch t·ªëi ƒëa <span className="text-red-500">*</span>
          </Label>
          <div className="relative mt-2">
            <Users className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
            <Input
              id="maxGuests"
              type="number"
              min="1"
              max="50"
              value={tourData.maxGuests}
              onChange={(e) => updateTourData("maxGuests", parseInt(e.target.value) || 1)}
              className="pl-10 text-base min-h-[48px]"
            />
          </div>
        </div>
      </div>

      <div className="grid grid-cols-2 gap-6">
        <div>
          <Label htmlFor="difficulty" className="text-base font-medium text-gray-900">
            ƒê·ªô kh√≥ <span className="text-red-500">*</span>
          </Label>
          <select
            id="difficulty"
            value={tourData.difficulty}
            onChange={(e) => updateTourData("difficulty", e.target.value)}
            className="mt-2 w-full p-3 border border-gray-300 rounded-md text-base min-h-[48px] focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">Ch·ªçn ƒë·ªô kh√≥</option>
            <option value="D·ªÖ">D·ªÖ - Ph√π h·ª£p cho m·ªçi l·ª©a tu·ªïi</option>
            <option value="Trung b√¨nh">Trung b√¨nh - C·∫ßn th·ªÉ l·ª±c c∆° b·∫£n</option>
            <option value="Kh√≥">Kh√≥ - C·∫ßn th·ªÉ l·ª±c t·ªët</option>
            <option value="R·∫•t kh√≥">R·∫•t kh√≥ - Ch·ªâ d√†nh cho ng∆∞·ªùi c√≥ kinh nghi·ªám</option>
          </select>
        </div>

        <div>
          <Label htmlFor="category" className="text-base font-medium text-gray-900">
            Lo·∫°i tour <span className="text-red-500">*</span>
          </Label>
          <select
            id="category"
            value={tourData.category}
            onChange={(e) => updateTourData("category", e.target.value)}
            className="mt-2 w-full p-3 border border-gray-300 rounded-md text-base min-h-[48px] focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">Ch·ªçn lo·∫°i tour</option>
            <option value="VƒÉn h√≥a & L·ªãch s·ª≠">VƒÉn h√≥a & L·ªãch s·ª≠</option>
            <option value="·∫®m th·ª±c">·∫®m th·ª±c</option>
            <option value="Thi√™n nhi√™n">Thi√™n nhi√™n</option>
            <option value="Phi√™u l∆∞u">Phi√™u l∆∞u</option>
            <option value="Th√†nh ph·ªë">Th√†nh ph·ªë</option>
            <option value="Ngh·ªá thu·∫≠t">Ngh·ªá thu·∫≠t</option>
            <option value="Th·ªÉ thao">Th·ªÉ thao</option>
            <option value="Gia ƒë√¨nh">Gia ƒë√¨nh</option>
          </select>
        </div>
      </div>

      <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
        <p className="text-base text-gray-600">
          <strong>‚ÑπÔ∏è L∆∞u √Ω:</strong> Th√¥ng tin n√†y s·∫Ω gi√∫p kh√°ch h√†ng t√¨m hi·ªÉu v·ªÅ m·ª©c ƒë·ªô ph√π h·ª£p v√† chu·∫©n b·ªã cho tour
          c·ªßa b·∫°n.
        </p>
      </div>
    </div>
  );

  const renderPricingSection = () => (
    <div className="p-6 space-y-6">
      <div className="grid grid-cols-2 gap-6">
        <div>
          <Label htmlFor="price" className="text-base font-medium text-gray-900">
            Gi√° tour (m·ªói ng∆∞·ªùi) <span className="text-red-500">*</span>
          </Label>
          <div className="relative mt-2">
            <DollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
            <Input
              id="price"
              type="number"
              min="1"
              value={tourData.price}
              onChange={(e) => updateTourData("price", parseFloat(e.target.value) || 0)}
              className="pl-10 text-base min-h-[48px]"
              placeholder="0"
            />
          </div>
        </div>

        <div>
          <Label htmlFor="currency" className="text-base font-medium text-gray-900">
            Lo·∫°i ti·ªÅn t·ªá
          </Label>
          <select
            id="currency"
            value={tourData.currency}
            onChange={(e) => updateTourData("currency", e.target.value)}
            className="mt-2 w-full p-3 border border-gray-300 rounded-md text-base min-h-[48px] focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="USD">USD - ƒê√¥ la M·ªπ</option>
            <option value="VND">VND - Vi·ªát Nam ƒê·ªìng</option>
            <option value="EUR">EUR - Euro</option>
            <option value="GBP">GBP - B·∫£ng Anh</option>
          </select>
        </div>
      </div>

      <div>
        <Label htmlFor="availability" className="text-base font-medium text-gray-900">
          T√≠nh kh·∫£ d·ª•ng <span className="text-red-500">*</span>
        </Label>
        <select
          id="availability"
          value={tourData.availability}
          onChange={(e) => updateTourData("availability", e.target.value)}
          className="mt-2 w-full p-3 border border-gray-300 rounded-md text-base min-h-[48px] focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        >
          <option value="">Ch·ªçn t√≠nh kh·∫£ d·ª•ng</option>
          <option value="H√†ng ng√†y">H√†ng ng√†y</option>
          <option value="Cu·ªëi tu·∫ßn">Ch·ªâ cu·ªëi tu·∫ßn</option>
          <option value="Theo l·ªãch tr√¨nh">Theo l·ªãch tr√¨nh c·ª• th·ªÉ</option>
          <option value="Theo y√™u c·∫ßu">Theo y√™u c·∫ßu</option>
        </select>
      </div>

      <div className="bg-green-50 border border-green-200 rounded-lg p-4">
        <h4 className="font-medium text-green-900 mb-2 text-base">üí∞ T√≥m t·∫Øt gi√°:</h4>
        <div className="text-green-800">
          <p className="text-lg font-bold">
            {tourData.price > 0 ? `${tourData.price} ${tourData.currency}` : "Ch∆∞a thi·∫øt l·∫≠p"} / ng∆∞·ªùi
          </p>
          <p className="text-base">
            T·ªëi ƒëa {tourData.maxGuests} kh√°ch = {(tourData.price * tourData.maxGuests).toLocaleString()}{" "}
            {tourData.currency} / tour
          </p>
        </div>
      </div>

      <Button variant="outline" className="text-base">
        Th√™m nhi·ªÅu t√πy ch·ªçn gi√°
      </Button>
    </div>
  );

  const renderDescriptionSection = () => (
    <div className="p-6 space-y-6">
      <div>
        <Label htmlFor="detailedDesc" className="text-base font-medium text-gray-900">
          M√¥ t·∫£ chi ti·∫øt <span className="text-red-500">*</span>
        </Label>
        <div className="mt-2">
          <Editor
            editorSerializedState={tourData.detailedDescriptionEditor}
            onSerializedChange={(value) => updateTourData("detailedDescriptionEditor", value)}
          />
        </div>
        <p className="text-base text-gray-500 mt-1">
          S·ª≠ d·ª•ng tr√¨nh so·∫°n th·∫£o ƒë·ªÉ t·∫°o m√¥ t·∫£ chi ti·∫øt v√† h·∫•p d·∫´n cho tour c·ªßa b·∫°n
        </p>
      </div>

      <div className="grid grid-cols-1 gap-6">
        <div>
          <Label className="text-base font-medium text-gray-900">Bao g·ªìm trong tour</Label>
          <textarea
            placeholder="V√≠ d·ª•: H∆∞·ªõng d·∫´n vi√™n chuy√™n nghi·ªáp, V√© tham quan, ƒê·ªì u·ªëng..."
            className="mt-2 w-full p-3 border border-gray-300 rounded-md text-base min-h-[96px] resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            rows={4}
          />
        </div>

        <div>
          <Label className="text-base font-medium text-gray-900">Kh√¥ng bao g·ªìm</Label>
          <textarea
            placeholder="V√≠ d·ª•: Chi ph√≠ c√° nh√¢n, B·∫£o hi·ªÉm du l·ªãch, Ti·ªÅn tip..."
            className="mt-2 w-full p-3 border border-gray-300 rounded-md text-base min-h-[96px] resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            rows={4}
          />
        </div>

        <div>
          <Label className="text-base font-medium text-gray-900">Y√™u c·∫ßu & l∆∞u √Ω</Label>
          <textarea
            placeholder="V√≠ d·ª•: Gi√†y ƒëi b·ªô tho·∫£i m√°i, Mang theo n∆∞·ªõc u·ªëng, Kh√¥ng ph√π h·ª£p cho ng∆∞·ªùi khuy·∫øt t·∫≠t..."
            className="mt-2 w-full p-3 border border-gray-300 rounded-md text-base min-h-[96px] resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            rows={4}
          />
        </div>
      </div>
    </div>
  );

  const renderSectionContent = (sectionId: string) => {
    switch (sectionId) {
      case "basic-info":
        return renderBasicInfoSection();
      case "images":
        return renderImagesSection();
      case "details":
        return renderDetailsSection();
      case "pricing":
        return renderPricingSection();
      case "description":
        return renderDescriptionSection();
      default:
        return null;
    }
  };

  const allSectionsValid = sections.every((section) => isSectionValid(section.id));

  const handleCreateTour = () => {
    if (allSectionsValid) {
      alert("üéâ Tour ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! (UI Only - ch∆∞a l∆∞u v√†o database)");
      console.log("Tour Data:", tourData);
    }
  };

  return (
    <div className="flex space-x-6">
      <div className="space-y-6 flex-1">
        <Accordion
          type="multiple"
          defaultValue={["basic-info", "images", "details", "pricing", "description"]}
          className="space-y-4"
        >
          {sections.map((section) => (
            <AccordionItem key={section.id} value={section.id} className="border border-gray-200 rounded-lg">
              <AccordionTrigger className="px-4 py-4 hover:bg-gray-50">
                {renderSectionTrigger(section)}
              </AccordionTrigger>
              <AccordionContent className="pb-0">{renderSectionContent(section.id)}</AccordionContent>
            </AccordionItem>
          ))}
        </Accordion>
      </div>

      <div className="min-w-[400px]">
        <div className="sticky top-4">
          <div className="bg-white border border-gray-200 rounded-lg shadow-sm">
            <div className="p-4 border-b border-gray-200">
              <h3 className="text-lg font-bold text-gray-900">Xem tr∆∞·ªõc tour</h3>
              <p className="text-base text-gray-600 mt-1">ƒê√¢y l√† c√°ch tour c·ªßa b·∫°n s·∫Ω hi·ªÉn th·ªã v·ªõi kh√°ch h√†ng</p>
            </div>

            <div className="p-4 space-y-4">
              {/* Tour Name & Location */}
              <div>
                <h4 className="text-xl font-bold text-gray-900 mb-2">
                  {tourData.name || "T√™n tour s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y"}
                </h4>
                <div className="flex items-center text-gray-600 mb-2">
                  <MapPin className="w-4 h-4 mr-1" />
                  <span className="text-base">{tourData.location || "ƒê·ªãa ƒëi·ªÉm"}</span>
                </div>
                <p className="text-gray-700 text-base">
                  {tourData.shortDescription || "M√¥ t·∫£ ng·∫Øn v·ªÅ tour s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y ƒë·ªÉ thu h√∫t kh√°ch h√†ng..."}
                </p>
              </div>

              {/* Image Preview */}
              <div>
                <div className="aspect-video bg-gray-100 border border-gray-200 rounded-lg flex items-center justify-center">
                  {tourData.images.length > 0 ? (
                    <div className="text-center text-gray-600">
                      <Upload className="w-8 h-8 mx-auto mb-2" />
                      <p className="text-base">{tourData.images.length} h√¨nh ·∫£nh</p>
                    </div>
                  ) : (
                    <div className="text-center text-gray-400">
                      <Upload className="w-8 h-8 mx-auto mb-2" />
                      <p className="text-base">H√¨nh ·∫£nh ch√≠nh</p>
                    </div>
                  )}
                </div>
              </div>

              {/* Tour Details */}
              <div className="grid grid-cols-2 gap-3 text-base">
                <div className="bg-gray-50 p-3 rounded">
                  <div className="font-medium text-gray-900">Th·ªùi gian</div>
                  <div className="text-gray-600">{tourData.duration || "Ch∆∞a ch·ªçn"}</div>
                </div>
                <div className="bg-gray-50 p-3 rounded">
                  <div className="font-medium text-gray-900">S·ªë kh√°ch</div>
                  <div className="text-gray-600">T·ªëi ƒëa {tourData.maxGuests} ng∆∞·ªùi</div>
                </div>
                <div className="bg-gray-50 p-3 rounded">
                  <div className="font-medium text-gray-900">ƒê·ªô kh√≥</div>
                  <div className="text-gray-600">{tourData.difficulty || "Ch∆∞a ch·ªçn"}</div>
                </div>
                <div className="bg-gray-50 p-3 rounded">
                  <div className="font-medium text-gray-900">Lo·∫°i tour</div>
                  <div className="text-gray-600">{tourData.category || "Ch∆∞a ch·ªçn"}</div>
                </div>
              </div>

              {/* Pricing */}
              <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">
                    {tourData.price > 0 ? `${tourData.price.toLocaleString()} ${tourData.currency}` : "Ch∆∞a c√≥ gi√°"}
                  </div>
                  <div className="text-base text-orange-700">m·ªói ng∆∞·ªùi</div>
                  {tourData.availability && (
                    <div className="text-base text-orange-600 mt-1">{tourData.availability}</div>
                  )}
                </div>
              </div>

              {/* Description Preview */}
              {(() => {
                const editorText = extractTextFromEditor(tourData.detailedDescriptionEditor);
                const displayText = editorText || tourData.detailedDescription;
                return displayText && displayText !== "M√¥ t·∫£ chi ti·∫øt v·ªÅ tour c·ªßa b·∫°n..." && (
                  <div>
                    <h5 className="font-medium text-gray-900 mb-2">M√¥ t·∫£ chi ti·∫øt</h5>
                    <div className="text-base text-gray-700 bg-gray-50 p-3 rounded border max-h-24 overflow-y-auto">
                      {displayText.length > 150 
                        ? `${displayText.substring(0, 150)}...` 
                        : displayText
                      }
                    </div>
                  </div>
                );
              })()}

              {/* Quick Stats */}
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                <h5 className="font-medium text-blue-900 mb-2 text-base">üìä Th·ªëng k√™ nhanh</h5>
                <div className="grid grid-cols-2 gap-2 text-base">
                  <div>
                    <span className="text-blue-700">T√™n tour:</span>
                    <span className="text-blue-600 ml-1">{tourData.name.length}/6+ k√Ω t·ª±</span>
                  </div>
                  <div>
                    <span className="text-blue-700">H√¨nh ·∫£nh:</span>
                    <span className="text-blue-600 ml-1">{tourData.images.length}/6 ·∫£nh</span>
                  </div>
                  <div>
                    <span className="text-blue-700">M√¥ t·∫£ ng·∫Øn:</span>
                    <span className="text-blue-600 ml-1">{tourData.shortDescription.length}/20+ k√Ω t·ª±</span>
                  </div>
                  <div>
                    <span className="text-blue-700">M√¥ t·∫£ chi ti·∫øt:</span>
                    <span className="text-blue-600 ml-1">
                      {(() => {
                        const editorText = extractTextFromEditor(tourData.detailedDescriptionEditor);
                        const textLength = editorText.length || tourData.detailedDescription.length;
                        return `${textLength}/50+ k√Ω t·ª±`;
                      })()}
                    </span>
                  </div>
                </div>
              </div>

              {/* Completion Status */}
              <div className="border-t border-gray-200 pt-4">
                <h5 className="font-medium text-gray-900 mb-3">Ti·∫øn ƒë·ªô ho√†n th√†nh</h5>
                <div className="space-y-2">
                  {sections.map((section) => {
                    const isValid = isSectionValid(section.id);
                    return (
                      <div key={section.id} className="flex items-center justify-between">
                        <span className="text-base text-gray-600">{section.title}</span>
                        <div className={`w-4 h-4 rounded-full ${isValid ? 'bg-green-500' : 'bg-gray-300'}`}>
                          {isValid && (
                            <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                              <path
                                fillRule="evenodd"
                                d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                clipRule="evenodd"
                              />
                            </svg>
                          )}
                        </div>
                      </div>
                    );
                  })}
                </div>
                
                <div className="mt-3 bg-gray-100 rounded-full h-2">
                  <div 
                    className="bg-green-500 h-2 rounded-full transition-all duration-300"
                    style={{ 
                      width: `${(sections.filter(s => isSectionValid(s.id)).length / sections.length) * 100}%` 
                    }}
                  ></div>
                </div>
                
                <div className="text-center mt-2 text-base text-gray-600">
                  {sections.filter(s => isSectionValid(s.id)).length} / {sections.length} ph·∫ßn ho√†n th√†nh
                </div>
              </div>

              {/* Action Buttons */}
              <div className="border-t border-gray-200 pt-4 space-y-3">
                <Button 
                  variant="outline" 
                  className="w-full text-base"
                  disabled={sections.filter(s => isSectionValid(s.id)).length === 0}
                >
                  Xem tr∆∞·ªõc ƒë·∫ßy ƒë·ªß
                </Button>
                
                <Button 
                  onClick={handleCreateTour}
                  disabled={!allSectionsValid}
                  className="w-full text-base bg-orange-500 hover:bg-orange-600"
                >
                  {allSectionsValid ? "T·∫°o tour ngay" : "Ho√†n th√†nh t·∫•t c·∫£ ƒë·ªÉ t·∫°o tour"}
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
